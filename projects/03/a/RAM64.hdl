// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    // send the lower bits to the RAM chips
    // use the higher bits as selectors
    DMux8Way(in=load, sel=address[3..5], a=ma, b=mb, c=mc, d=md, e=me, f=mf, g=mg, h=mh);

    RAM8(in=in, address=address[0..2], load=ma, out=oa);
    RAM8(in=in, address=address[0..2], load=mb, out=ob);
    RAM8(in=in, address=address[0..2], load=mc, out=oc);
    RAM8(in=in, address=address[0..2], load=md, out=od);
    RAM8(in=in, address=address[0..2], load=me, out=oe);
    RAM8(in=in, address=address[0..2], load=mf, out=of);
    RAM8(in=in, address=address[0..2], load=mg, out=og);
    RAM8(in=in, address=address[0..2], load=mh, out=oh);
 
    Mux8Way16(sel=address[3..5], out=out,
        a=oa,
        b=ob,
        c=oc, 
        d=od,
        e=oe,
        f=of,
        g=og,
        h=oh
    );
}
