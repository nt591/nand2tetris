// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    // use RAM64 chips
    // send lower 6 bits to RAM chips
    // use upper 3 bits as DMux / Mux

    // determine which chip we send the load to
    DMux8Way(
        in=load,
        sel=address[6..8],
        a=ma,
        b=mb,
        c=mc,
        d=md,
        e=me,
        f=mf,
        g=mg,
        h=mh
    );

    // send in to ram
    RAM64(in=in, load=ma, address=address[0..5], out=oa);
    RAM64(in=in, load=mb, address=address[0..5], out=ob);
    RAM64(in=in, load=mc, address=address[0..5], out=oc);
    RAM64(in=in, load=md, address=address[0..5], out=od);
    RAM64(in=in, load=me, address=address[0..5], out=oe);
    RAM64(in=in, load=mf, address=address[0..5], out=of);
    RAM64(in=in, load=mg, address=address[0..5], out=og);
    RAM64(in=in, load=mh, address=address[0..5], out=oh);

    // now use those out values to Mux our value back based on upper range
    Mux8Way16(a=oa, b=ob, c=oc, d=od, e=oe, f=of, g=og, h=oh, sel=address[6..8], out=out);
}